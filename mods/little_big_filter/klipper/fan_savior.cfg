###  FAN SAVIOR  ###
# V0.2
# What for :
#   Macros to keep fan ON as long as the temperature_sensor is hot (attempt to preserve plastic parts, eg bedfan)
# Nota :
#   If fan_speed > off_below, the fan will turn off itself
# Installation : 
#   - Uncomment or add [include addons/fan_savior.cfg] in printer.cfg
#   - add/modify variable_fan_savior according your config,
#   - fan_vavior is a dict containing for each fans : start_temp, stop_temp, temperature_sensor, control_speed  

### ADAPT TO YOUR CONFIG ###

[gcode_macro _fan_savior]
variable_fan_savior: {"fan_generic bedfan": # fan_section name
                        {"start_temp" : 80,  #bed temperature to start the fan  
                        "stop_temp" : 60,     #bed temperature to stop the fan unless manually turn off CANNOT BE LOWER THAN start_temp
                        "temperature_sensor" : "heater_bed",
                        "control_speed": 0.01, # minimal fan speed when temperature sensor reaches start_temp
                        }, 
                      "fan_generic filter": # fan_section name
                        {"start_temp" : 50,  #bed temperature to start the fan  
                        "stop_temp" : 50,     #bed temperature to stop the fan unless manually turn off CANNOT BE LOWER THAN start_temp
                        "temperature_sensor" : "temperature_sensor chamber",
                        "control_speed": 0.6},
                        }

###  DO NOT MODIFY BELOW  ###
[delayed_gcode _fan_savior_delayed]
initial_duration:1
gcode:
    _FAN_SAVIOR
    UPDATE_DELAYED_GCODE ID=_fan_savior_delayed DURATION=1

[gcode_macro _fan_savior]
gcode:
    {% for _fan, _settings in fan_savior.items() %}
        {% if _settings.valid is not defined %}
            {% set _= fan_savior[_fan].update({"valid" : true if _fan.startswith("fan_generic ") else false }) %}
            {% if not fan_savior[_fan].valid %}
                RESPOND TYPE=error MSG="'{_fan}' is not a valid fan for fan_savior"
            {% endif %}
        {% endif %}

        {% if _settings.valid %}
             {% set fan_config = printer.configfile.config[_fan] %}
             {% set control_speed = _settings.control_speed|default(0.5) * (fan_config.max_power|default(1)) %}
             {% set _= _settings.update({"temperature": printer[_settings.temperature_sensor].temperature, "speed" : printer[_fan].speed }) %}

             {% if printer[_fan].speed <= control_speed %}
                 {% if printer[_fan].speed < control_speed %}
                    {% if printer[_settings.temperature_sensor].temperature > _settings.start_temp %}
                        SET_FAN_SPEED FAN={_fan.split(" ")[1]} SPEED={control_speed}
                        RESPOND PREFIX="_FAN_SAVIOR : " MSG="'{_fan}' starts"
                    {% endif %}
                 {% elif printer[_fan].speed == control_speed %}
                    {% if printer[_settings.temperature_sensor].temperature < _settings.stop_temp %}
                        SET_FAN_SPEED FAN={_fan.split(" ")[1]} SPEED=0
                        RESPOND PREFIX="_FAN_SAVIOR : " MSG="'{_fan}' stops"
                    {% endif %}
                 {%endif %}
             {% endif %}
        {% endif %}
    {% endfor %}